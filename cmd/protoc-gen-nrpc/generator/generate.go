package generator

import (
	"encoding/json"
	"fmt"
	"path"
	"strings"

	"github.com/byebyebruce/natsrpc/annotation"
	"github.com/golang/protobuf/proto"
	pgs "github.com/lyft/protoc-gen-star"
)

func New() pgs.Module {
	return &NatsRpcModule{
		ModuleBase: &pgs.ModuleBase{},
	}
}

type NatsRpcModule struct {
	*pgs.ModuleBase
}

func (m *NatsRpcModule) Name() string {
	return "nrpc"
}

func (m *NatsRpcModule) Execute(targets map[string]pgs.File, packages map[string]pgs.Package) []pgs.Artifact {
	for _, f := range targets {
		m.Push(f.Name().String())
		services := make([]ServiceSpec, 0, len(f.Services()))
		for _, service := range f.Services() {
			serviceSpec := m.ExtraService(service)
			services = append(services, serviceSpec)
		}
		bytes, _ := json.Marshal(services)
		base := strings.Split(f.Name().String(), ".")[0]
		m.OverwriteCustomFile(path.Join(m.OutputPath(), fmt.Sprintf("%s.nrpc.pb.go", base)), string(bytes), 0644)

		m.Pop()
	}

	return m.Artifacts()
}

// 根据语法树提取出结构
func (m *NatsRpcModule) ExtraService(service pgs.Service) ServiceSpec {
	serviceData := ServiceSpec{
		ServiceName: service.Name().String(),
	}
	for _, method := range service.Methods() {
		methodSpec := ServiceMethodSpec{
			MethodName:     method.Name().String(),
			InputTypeName:  method.Input().Name().String(),
			OutputTypeName: method.Output().Name().String(),
		}
		opts := method.Descriptor().GetOptions()
		descs, _ := proto.ExtensionDescs(opts)
		for _, desc := range descs {
			if desc.Field == 2360 {
				ext, _ := proto.GetExtension(opts, desc)
				if value, ok := ext.(*annotation.MethodType); ok {
					methodSpec.MethodType = *value
					break
				}
			}
		}
		serviceData.MethodList = append(serviceData.MethodList, methodSpec)
	}
	return serviceData
}

type ServiceSpec struct {
	ServiceName string
	MethodList  []ServiceMethodSpec
}

type ServiceMethodSpec struct {
	MethodName     string
	InputTypeName  string
	OutputTypeName string
	MethodType     annotation.MethodType
}

const tempService = `
{{$root := .}}
type {{.ServiceName}}Interface interface {
	{{- range $_, $m := .MethodList}}
		{{$m.MethodName}}(in *{{$m.InputTypeName}}, out *{{$m.OutputTypeName}}) error
	{{- end}}
}
func Register{{.ServiceName}}(srv *rpc.Server, x {{.ServiceName}}Interface) error {
	if err := srv.RegisterName("{{.ServiceName}}", x); err != nil {
		return err
	}
	return nil
}
type {{.ServiceName}}Client struct {
	*rpc.Client
}
var _ {{.ServiceName}}Interface = (*{{.ServiceName}}Client)(nil)
func Dial{{.ServiceName}}(network, address string) (*{{.ServiceName}}Client, error) {
	c, err := rpc.Dial(network, address)
	if err != nil {
		return nil, err
	}
	return &{{.ServiceName}}Client{Client: c}, nil
}
{{range $_, $m := .MethodList}}
func (p *{{$root.ServiceName}}Client) {{$m.MethodName}}(in *{{$m.InputTypeName}}, out *{{$m.OutputTypeName}}) error {
	return p.Client.Call("{{$root.ServiceName}}.{{$m.MethodName}}", in, out)
}
{{end}}
`

const tempFile = `// Code generated by protoc-gen-nrpc. DO NOT EDIT.
// source: {{ .InputPath }}
package {{ pkg . }}

{{ range .Services }}
{{ template "service" . }}
{{ end }}
`
