package main

type param struct {
	Param string
	Type  string
}

type method struct {
	Name  string
	Param []param
}

type Tmpl struct {
	Package string
	Imports []string
	Service []ServiceDesc
}

type ServiceDesc struct {
	Name   string
	Method []method
}

const tFile = `// This code was autogenerated from natsrpc.gencode, do not edit.

package {{$Package}}

import (
	"context"

	"google.golang.org/protobuf/proto"
	"github.com/nats-io/nats.go"
	{{- range  .Imports}}
	{{.}}
	{{- end}}

	"github.com/byebyebruce/natsrpc"
)

{{- range .Service}}

// {{.GetName}}Server is the interface that providers of the service
// {{.GetName}} should implement.
type {{.GetName}}Server interface {
	{{- range .Method}}
	{{- if ne .GetInputType ".nrpc.NoRequest"}}
	{{- $resultType := GetResultType .}}
	{{.GetName}}(ctx context.Context
		{{- range GetMethodSubjectParams . -}}
		, {{ . }} string
		{{- end -}}
		{{- if ne .GetInputType ".nrpc.Void" -}}
		, req {{GoType .GetInputType}}
		{{- end -}}
		{{- if HasStreamedReply . -}}
		, pushRep func({{GoType .GetOutputType}})
		{{- end -}}
	)
		{{- if ne $resultType ".nrpc.NoReply" }} (
		{{- if and (ne $resultType ".nrpc.Void") (not (HasStreamedReply .)) -}}
		resp {{GoType $resultType}}, {{end -}}
		err error)
		{{- end -}}
	{{- end}}
	{{- end}}
}

{{- if Prometheus}}

var (
	// The request completion time, measured at client-side.
	clientRCTFor{{.GetName}} = prometheus.NewSummaryVec(
		prometheus.SummaryOpts{
			Name:       "nrpc_client_request_completion_time_seconds",
			Help:       "The request completion time for calls, measured client-side.",
			Objectives: map[float64]float64{0.9: 0.01, 0.95: 0.01, 0.99: 0.001},
			ConstLabels: map[string]string{
				"service": "{{.GetName}}",
			},
		},
		[]string{"method"})

	// The handler execution time, measured at server-side.
	serverHETFor{{.GetName}} = prometheus.NewSummaryVec(
		prometheus.SummaryOpts{
			Name:       "nrpc_server_handler_execution_time_seconds",
			Help:       "The handler execution time for calls, measured server-side.",
			Objectives: map[float64]float64{0.9: 0.01, 0.95: 0.01, 0.99: 0.001},
			ConstLabels: map[string]string{
				"service": "{{.GetName}}",
			},
		},
		[]string{"method"})

	// The counts of calls made by the client, classified by result type.
	clientCallsFor{{.GetName}} = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "nrpc_client_calls_count",
			Help: "The count of calls made by the client.",
			ConstLabels: map[string]string{
				"service": "{{.GetName}}",
			},
		},
		[]string{"method", "encoding", "result_type"})

	// The counts of requests handled by the server, classified by result type.
	serverRequestsFor{{.GetName}} = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "nrpc_server_requests_count",
			Help: "The count of requests handled by the server.",
			ConstLabels: map[string]string{
				"service": "{{.GetName}}",
			},
		},
		[]string{"method", "encoding", "result_type"})
)
{{- end}}

// {{.GetName}}Handler provides a NATS subscription handler that can serve a
// subscription using a given {{.GetName}}Server implementation.
type {{.GetName}}Handler struct {
	ctx     context.Context
	workers *nrpc.WorkerPool
	nc      nrpc.NatsConn
	server  {{.GetName}}Server

	encodings []string
}

func New{{.GetName}}Handler(ctx context.Context, nc nrpc.NatsConn, s {{.GetName}}Server) *{{.GetName}}Handler {
	return &{{.GetName}}Handler{
		ctx:    ctx,
		nc:     nc,
		server: s,

		encodings: []string{"protobuf"},
	}
}

func New{{.GetName}}ConcurrentHandler(workers *nrpc.WorkerPool, nc nrpc.NatsConn, s {{.GetName}}Server) *{{.GetName}}Handler {
	return &{{.GetName}}Handler{
		workers: workers,
		nc:      nc,
		server:  s,
	}
}

// SetEncodings sets the output encodings when using a '*Publish' function
func (h *{{.GetName}}Handler) SetEncodings(encodings []string) {
	h.encodings = encodings
}
`
