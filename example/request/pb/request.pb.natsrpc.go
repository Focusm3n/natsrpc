// Code generated by protoc-gen-natsrpc DO NOT EDIT.
// source: request.proto

package request

import (
	context "context"
	fmt "fmt"
	natsrpc "github.com/byebyebruce/natsrpc"
	pb "github.com/byebyebruce/natsrpc/example/pb"
	proto "github.com/golang/protobuf/proto"
	nats "github.com/nats-io/nats.go"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Greeter
type Greeter interface {
	// Hello
	Hello(ctx context.Context, req *HelloRequest) (*pb.HelloReply, error)
	// ToAll
	ToAll(ctx context.Context, req *natsrpc.Empty)
}

// RegisterGreeter
func RegisterGreeter(server *natsrpc.Server, s Greeter, opts ...natsrpc.ServiceOption) (natsrpc.IService, error) {
	return server.Register("github.com.byebyebruce.example.request.Greeter", s, opts...)
}

// GreeterClient
type GreeterClient struct {
	c *natsrpc.Client
}

// NewGreeterClient
func NewGreeterClient(enc *nats.EncodedConn, opts ...natsrpc.ClientOption) (*GreeterClient, error) {
	c, err := natsrpc.NewClient(enc, "github.com.byebyebruce.example.request.Greeter", opts...)
	if err != nil {
		return nil, err
	}
	ret := &GreeterClient{
		c: c,
	}
	return ret, nil
}

// Hello
func (c *GreeterClient) Hello(ctx context.Context, req *HelloRequest) (*pb.HelloReply, error) {
	rep := &pb.HelloReply{}
	err := c.c.Request(ctx, "Hello", req, rep)
	return rep, err
}

// ToAll
func (c *GreeterClient) ToAll(ctx context.Context, notify *natsrpc.Empty) error {
	return c.c.Publish("ToAll", notify)
}
