// This code was autogenerated from natsrpc.gencode, do not edit.

package service

import (
	"context"
	"github.com/byebyebruce/natsrpc/testdata"
	"github.com/byebyebruce/natsrpc/testdata/pb"

	"github.com/byebyebruce/natsrpc"
	"github.com/golang/protobuf/proto"
)

// RegisterGreeter
func RegisterGreeter(rpc *natsrpc.NatsRPC, s helloworld.Greeter, opts ...natsrpc.Option) (natsrpc.Service, error) {
	return rpc.Register("helloworld.Greeter", s, opts...)
}

// NewGreeterClient
func NewGreeterClient(rpc *natsrpc.NatsRPC, opts ...natsrpc.Option) (*GreeterClient, error) {
	c := &GreeterClient{
		rpc: rpc,
		opt: natsrpc.MakeOptions(opts...),
	}
	return c, nil
}

// GreeterClient
type GreeterClient struct {
	rpc *natsrpc.NatsRPC
	opt natsrpc.Options
}

// ID 根据ID获得client
func (c *GreeterClient) ID(id interface{}) *GreeterClient {
	ret := *c
	natsrpc.WithID(id)(&ret.opt)
	return &ret
}

// PublishHiAll
func (c *GreeterClient) PublishHiAll(req *pb.HelloRequest) error {
	sub := natsrpc.CombineSubject(c.opt.Namespace(), "helloworld.Greeter.HiAll", c.opt.ID())
	return c.rpc.Publish(sub, req, c.opt)
}

// RequestAreYouOK
func (c *GreeterClient) RequestAreYouOK(ctx context.Context, req *pb.HelloRequest) (*pb.HelloReply, error) {
	sub := natsrpc.CombineSubject(c.opt.Namespace(), "helloworld.Greeter.AreYouOK", c.opt.ID())
	rep := &pb.HelloReply{}
	err := c.rpc.Request(ctx, sub, req, rep, c.opt)
	return rep, err
}

// AsyncRequestAreYouOK
func (c *GreeterClient) AsyncRequestAreYouOK(req *pb.HelloRequest, cb func(*pb.HelloReply, error)) {
	sub := natsrpc.CombineSubject(c.opt.Namespace(), "helloworld.Greeter.AreYouOK", c.opt.ID())
	rep := &pb.HelloReply{}
	f := func(_ proto.Message, err error) {
		cb(rep, err)
	}
	c.rpc.AsyncRequest(sub, req, rep, c.opt, f)
}
