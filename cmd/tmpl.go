package main
const tFile = `// This code was autogenerated from natsrpc.gencode, do not edit.

package {{.OutPackage}}

import (
	"context"

	{{- range  .Imports}}
	{{.}}
	{{- end}}

	"github.com/byebyebruce/natsrpc"
)
{{- range .Service}}

// Register{{.Name}} {{.Comment}}
func Register{{.Name}}(rpc *natsrpc.NatsRPC, s {{$.Package}}.{{.Name}}, opts ...natsrpc.Option) (natsrpc.Service, error) {
	return rpc.Register(s, opts...)
}

// New{{.Name}}Client {{.Comment}}
func New{{.Name}}Client(rpc *natsrpc.NatsRPC, opts ...natsrpc.Option) (*{{.Name}}Client, error) {
	c := &{{.Name}}Client{
		rpc:rpc,
		opt:natsrpc.MakeOptions(opts...),
	}
	return c, nil
}

{{- $clientName := .Name}}

// {{.Name}}Client
type {{.Name}}Client struct {
	rpc 	*natsrpc.NatsRPC
	opt  	natsrpc.Options
}

{{- range .Method}}
// {{.Name}} {{.Comment}}
func (c *{{$clientName}}Client){{.Name}}(
	{{- range $i, $v := .Param -}}
		{{- if ne $i 0 -}}
		, 
		{{- end -}}
		{{ $v.Name }} {{ $v.Type }}
	{{- end -}}
) error {
	return nil
}
{{- end}}

{{- end}}


{{- range .Service}}

// {{.Name}}Server is the interface that providers of the service
// {{.Name}} should implement.
type {{.Name}}Server interface {
	{{- range .Method}}
	{{.Name}}(
		{{- range $i, $v := .Param -}}
			{{- if ne $i 0 -}}
			, 
			{{- end -}}
			{{ $v.Name }} {{ $v.Type }}
		{{- end -}}
	)
	{{- end}}
}
{{- end}}
`
