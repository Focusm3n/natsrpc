// This code was autogenerated from natsrpc.gencode, do not edit.

package service

import (
	"context"
	"github.com/byebyebruce/natsrpc/example/api"
	"github.com/byebyebruce/natsrpc/testdata"

	"github.com/byebyebruce/natsrpc"
)

// RegisterExample
func RegisterExample(rpc *natsrpc.NatsRPC, s api.Example, opts ...natsrpc.Option) (natsrpc.Service, error) {
	return rpc.Register(s, opts...)
}

// NewExampleClient
func NewExampleClient(rpc *natsrpc.NatsRPC, opts ...natsrpc.Option) (*ExampleClient, error) {
	c := &ExampleClient{
		rpc: rpc,
		opt: natsrpc.MakeOptions(opts...),
	}
	return c, nil
}

// ExampleClient
type ExampleClient struct {
	rpc *natsrpc.NatsRPC
	opt natsrpc.Options
}

// Notify
func (c *ExampleClient) Notify(ctx context.Context, req helloworld.HelloReply) error {
	return nil
}

// Request
func (c *ExampleClient) Request(ctx context.Context, req helloworld.HelloRequest, repl helloworld.HelloReply) error {
	return nil
}

// RegisterHello
func RegisterHello(rpc *natsrpc.NatsRPC, s api.Hello, opts ...natsrpc.Option) (natsrpc.Service, error) {
	return rpc.Register(s, opts...)
}

// NewHelloClient
func NewHelloClient(rpc *natsrpc.NatsRPC, opts ...natsrpc.Option) (*HelloClient, error) {
	c := &HelloClient{
		rpc: rpc,
		opt: natsrpc.MakeOptions(opts...),
	}
	return c, nil
}

// HelloClient
type HelloClient struct {
	rpc *natsrpc.NatsRPC
	opt natsrpc.Options
}

// Notify
func (c *HelloClient) Notify(ctx context.Context, req helloworld.HelloReply) error {
	return nil
}

// Request
func (c *HelloClient) Request(ctx context.Context, req helloworld.HelloRequest, repl helloworld.HelloReply) error {
	return nil
}

// ExampleServer is the interface that providers of the service
// Example should implement.
type ExampleServer interface {
	Notify(ctx context.Context, req helloworld.HelloReply)
	Request(ctx context.Context, req helloworld.HelloRequest, repl helloworld.HelloReply)
}

// HelloServer is the interface that providers of the service
// Hello should implement.
type HelloServer interface {
	Notify(ctx context.Context, req helloworld.HelloReply)
	Request(ctx context.Context, req helloworld.HelloRequest, repl helloworld.HelloReply)
}
