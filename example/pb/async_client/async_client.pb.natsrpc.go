// Code generated by protoc-gen-natsrpc DO NOT EDIT.
// source: async_client.proto

package async_client

import (
	context "context"
	fmt "fmt"
	natsrpc "github.com/byebyebruce/natsrpc"
	pb "github.com/byebyebruce/natsrpc/example/pb"
	proto "github.com/golang/protobuf/proto"
	nats "github.com/nats-io/nats.go"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Greeter1
type Greeter1 interface {
	// Hello
	Hello(ctx context.Context, req *pb.HelloRequest) (*pb.HelloReply, error)
	// HelloToAll
	HelloToAll(ctx context.Context, req *pb.HelloRequest)
}

// RegisterGreeter1
func RegisterGreeter1(server *natsrpc.Server, s Greeter1, opts ...natsrpc.ServiceOption) (natsrpc.IService, error) {
	return server.Register("github.com.byebyebruce.example.pb.async_client.Greeter1", s, opts...)
}

// Greeter1Client
type Greeter1Client struct {
	c    *natsrpc.Client
	doer natsrpc.AsyncDoer
}

// NewGreeter1Client
func NewGreeter1Client(enc *nats.EncodedConn, doer natsrpc.AsyncDoer, opts ...natsrpc.ClientOption) (*Greeter1Client, error) {
	c, err := natsrpc.NewClient(enc, "github.com.byebyebruce.example.pb.async_client.Greeter1", opts...)
	if err != nil {
		return nil, err
	}
	ret := &Greeter1Client{
		c:    c,
		doer: doer,
	}
	return ret, nil
}

// Hello
func (c *Greeter1Client) Hello(ctx context.Context, req *pb.HelloRequest, cb func(*pb.HelloReply, error), opt ...natsrpc.CallOption) {
	go func() {
		rep := &pb.HelloReply{}
		err := c.c.Request(ctx, "Hello", req, rep, opt...)
		newCb := func() {
			cb(rep, err)
		}
		c.doer.Do(ctx, newCb)
	}()
}

// HelloToAll
func (c *Greeter1Client) HelloToAll(notify *pb.HelloRequest) error {
	return c.c.Publish("HelloToAll", notify)
}
