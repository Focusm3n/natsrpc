// Code generated by protoc-gen-natsrpc. DO NOT EDIT.
// versions:
// - protoc-gen-natsrpc v0.6.0
// source: example.proto

package example

import (
	context "context"
	natsrpc "github.com/byebyebruce/natsrpc"
	nats_go "github.com/nats-io/nats.go"
	reflect "reflect"
)

var _ context.Context
var _ = natsrpc.Version
var _ = nats_go.Version
var _ reflect.Value

const (
	_GreetingNATSRPCServiceName = "github.com/byebyebruce/natsrpc/example|example.Greeting"
)

var _Greeting_Desc = natsrpc.ServiceDesc{
	ServiceName: _GreetingNATSRPCServiceName,
	Methods: []natsrpc.MethodDesc{
		{
			MethodName:  "Hello",
			Handler:     _Greeting_Hello,
			RequestType: reflect.TypeOf(HelloRequest{}),
			IsPublish:   false,
		},
	},
	Metadata: "example.proto",
}

// 测试
type GreetingNATSRPCServer interface {
	Hello(ctx context.Context, req *HelloRequest) (*HelloReply, error)
}

func _Greeting_Hello(svc interface{}, ctx context.Context, req any) (any, error) {
	return svc.(GreetingNATSRPCServer).Hello(ctx, req.(*HelloRequest))
}

// RegisterGreetingNATSRPCServer register Greeting service
func RegisterGreetingNATSRPCServer(register natsrpc.ServiceRegistrar, s GreetingNATSRPCServer, opts ...natsrpc.ServiceOption) (natsrpc.IService, error) {
	return register.Register(_Greeting_Desc, s, opts...)
}

// 测试
type GreetingNATSRPCClient interface {
	Hello(ctx context.Context, req *HelloRequest, opt ...natsrpc.CallOption) (*HelloReply, error)
}

type _GreetingNATSRPCClient struct {
	c *natsrpc.Client
}

// NewGreetingNATSRPCClient
func NewGreetingNATSRPCClient(conn *nats_go.Conn, opts ...natsrpc.ClientOption) GreetingNATSRPCClient {
	c := natsrpc.NewClient(conn, _GreetingNATSRPCServiceName, opts...)
	ret := &_GreetingNATSRPCClient{
		c: c,
	}
	return ret
}
func (c *_GreetingNATSRPCClient) Hello(ctx context.Context, req *HelloRequest, opt ...natsrpc.CallOption) (*HelloReply, error) {
	rep := &HelloReply{}
	err := c.c.Request(ctx, "Hello", req, rep, opt...)
	return rep, err
}

const (
	_GreetingToAllNATSRPCServiceName = "github.com/byebyebruce/natsrpc/example|example.GreetingToAll"
)

var _GreetingToAll_Desc = natsrpc.ServiceDesc{
	ServiceName: _GreetingToAllNATSRPCServiceName,
	Methods: []natsrpc.MethodDesc{
		{
			MethodName:  "HelloToAll",
			Handler:     _GreetingToAll_HelloToAll,
			RequestType: reflect.TypeOf(HelloRequest{}),
			IsPublish:   true,
		},
	},
	Metadata: "example.proto",
}

// 测试
type GreetingToAllNATSRPCServer interface {
	HelloToAll(ctx context.Context, req *HelloRequest) (*Empty, error)
}

func _GreetingToAll_HelloToAll(svc interface{}, ctx context.Context, req any) (any, error) {
	return svc.(GreetingToAllNATSRPCServer).HelloToAll(ctx, req.(*HelloRequest))
}

// RegisterGreetingToAllNATSRPCServer register GreetingToAll service
func RegisterGreetingToAllNATSRPCServer(register natsrpc.ServiceRegistrar, s GreetingToAllNATSRPCServer, opts ...natsrpc.ServiceOption) (natsrpc.IService, error) {
	return register.Register(_GreetingToAll_Desc, s, opts...)
}

// 测试
type GreetingToAllNATSRPCClient interface {
	HelloToAll(notify *HelloRequest, opt ...natsrpc.CallOption) error
}

type _GreetingToAllNATSRPCClient struct {
	c *natsrpc.Client
}

// NewGreetingToAllNATSRPCClient
func NewGreetingToAllNATSRPCClient(conn *nats_go.Conn, opts ...natsrpc.ClientOption) GreetingToAllNATSRPCClient {
	c := natsrpc.NewClient(conn, _GreetingToAllNATSRPCServiceName, opts...)
	ret := &_GreetingToAllNATSRPCClient{
		c: c,
	}
	return ret
}
func (c *_GreetingToAllNATSRPCClient) HelloToAll(notify *HelloRequest, opt ...natsrpc.CallOption) error {
	return c.c.Publish("HelloToAll", notify, opt...)
}
