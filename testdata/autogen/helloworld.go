// This code was autogenerated from natsrpc.gencode, do not edit.

package service

import (
	"context"
	"github.com/byebyebruce/natsrpc/testdata"
	"github.com/byebyebruce/natsrpc/testdata/pb"

	"github.com/byebyebruce/natsrpc"
)

// RegisterExample
func RegisterExample(rpc *natsrpc.NatsRPC, s helloworld.Example, opts ...natsrpc.Option) (natsrpc.Service, error) {
	return rpc.Register(s, opts...)
}

// NewExampleClient
func NewExampleClient(rpc *natsrpc.NatsRPC, opts ...natsrpc.Option) (*ExampleClient, error) {
	c := &ExampleClient{
		rpc: rpc,
		opt: natsrpc.MakeOptions(opts...),
	}
	return c, nil
}

// ExampleClient
type ExampleClient struct {
	rpc *natsrpc.NatsRPC
	opt natsrpc.Options
}

// ID 根据ID获得client
func (c *ExampleClient) ID(id interface{}) *ExampleClient {
	ret := *c
	natsrpc.WithID(id)(&ret.opt)
	return &ret
}

// Notify
func (c *ExampleClient) Notify(req *pb.HelloReply) error {
	sub := natsrpc.CombineSubject(c.opt.Namespace(), "helloworld_Example_Notify", c.opt.ID())
	return c.rpc.Publish(sub, req, c.opt)
}

// Request
func (c *ExampleClient) Request(ctx context.Context, req *pb.HelloRequest) (*pb.HelloReply, error) {
	sub := natsrpc.CombineSubject(c.opt.Namespace(), "helloworld_Example_Request", c.opt.ID())
	rep := &pb.HelloReply{}
	err := c.rpc.Request(ctx, sub, req, rep, c.opt)
	return rep, err
}

// RegisterHello
func RegisterHello(rpc *natsrpc.NatsRPC, s helloworld.Hello, opts ...natsrpc.Option) (natsrpc.Service, error) {
	return rpc.Register(s, opts...)
}

// NewHelloClient
func NewHelloClient(rpc *natsrpc.NatsRPC, opts ...natsrpc.Option) (*HelloClient, error) {
	c := &HelloClient{
		rpc: rpc,
		opt: natsrpc.MakeOptions(opts...),
	}
	return c, nil
}

// HelloClient
type HelloClient struct {
	rpc *natsrpc.NatsRPC
	opt natsrpc.Options
}

// ID 根据ID获得client
func (c *HelloClient) ID(id interface{}) *HelloClient {
	ret := *c
	natsrpc.WithID(id)(&ret.opt)
	return &ret
}

// Notify
func (c *HelloClient) Notify(req *pb.HelloReply) error {
	sub := natsrpc.CombineSubject(c.opt.Namespace(), "helloworld_Hello_Notify", c.opt.ID())
	return c.rpc.Publish(sub, req, c.opt)
}

// Request
func (c *HelloClient) Request(ctx context.Context, req *pb.HelloRequest) (*pb.HelloReply, error) {
	sub := natsrpc.CombineSubject(c.opt.Namespace(), "helloworld_Hello_Request", c.opt.ID())
	rep := &pb.HelloReply{}
	err := c.rpc.Request(ctx, sub, req, rep, c.opt)
	return rep, err
}
