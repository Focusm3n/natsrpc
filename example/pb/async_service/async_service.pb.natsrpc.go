// Code generated by protoc-gen-natsrpc. DO NOT EDIT.
// source: async_service.proto

package async_service

import (
	context "context"
	fmt "fmt"
	natsrpc "github.com/byebyebruce/natsrpc"
	pb "github.com/byebyebruce/natsrpc/example/pb"
	proto "github.com/golang/protobuf/proto"
	nats "github.com/nats-io/nats.go"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// GreeterService Greeter service interface
type GreeterService interface {
	// Hello call Hello
	Hello(ctx context.Context, req *pb.HelloRequest, cb func(*pb.HelloReply, error))
	// HelloToAll call HelloToAll
	HelloToAll(ctx context.Context, req *pb.HelloRequest)
}

// RegisterGreeter register Greeter service
func RegisterGreeter(server *natsrpc.Server, doer natsrpc.AsyncDoer, s GreeterService, opts ...natsrpc.ServiceOption) (natsrpc.IService, error) {
	ss := &GreeterWrapper{
		doer: doer,
		s:    s,
	}
	return server.Register("github.com.byebyebruce.natsrpc.example.pb.async_service.Greeter", ss, opts...)
}

// GreeterWrapper DO NOT USE
type GreeterWrapper struct {
	doer natsrpc.AsyncDoer
	s    GreeterService
}

// Hello DO NOT USE
func (s *GreeterWrapper) Hello(ctx context.Context, req *pb.HelloRequest) (*pb.HelloReply, error) {
	f := func(cb func(interface{}, error)) {
		s.s.Hello(ctx, req, func(r *pb.HelloReply, e error) {
			cb(r, e)
		})
	}
	temp, err := s.doer.AsyncDo(ctx, f)
	if temp == nil {
		return nil, err
	}
	return temp.(*pb.HelloReply), err
}

// HelloToAll DO NOT USE
func (s *GreeterWrapper) HelloToAll(ctx context.Context, req *pb.HelloRequest) {
	s.doer.AsyncDo(ctx, func(_ func(interface{}, error)) {
		s.s.HelloToAll(ctx, req)
	})
}

// GreeterClient
type GreeterClient interface {
	// Hello
	Hello(ctx context.Context, req *pb.HelloRequest, opt ...natsrpc.CallOption) (*pb.HelloReply, error)
	// HelloToAll
	HelloToAll(notify *pb.HelloRequest, opt ...natsrpc.CallOption) error
}

type _GreeterClient struct {
	c *natsrpc.Client
}

// NewGreeterClient
func NewGreeterClient(enc *nats.EncodedConn, opts ...natsrpc.ClientOption) (GreeterClient, error) {
	c, err := natsrpc.NewClient(enc, "github.com.byebyebruce.natsrpc.example.pb.async_service.Greeter", opts...)
	if err != nil {
		return nil, err
	}
	ret := &_GreeterClient{
		c: c,
	}
	return ret, nil
}
func (c *_GreeterClient) Hello(ctx context.Context, req *pb.HelloRequest, opt ...natsrpc.CallOption) (*pb.HelloReply, error) {
	rep := &pb.HelloReply{}
	err := c.c.Request(ctx, "Hello", req, rep, opt...)
	return rep, err
}
func (c *_GreeterClient) HelloToAll(notify *pb.HelloRequest, opt ...natsrpc.CallOption) error {
	return c.c.Publish("HelloToAll", notify, opt...)
}
