// Code generated by protoc-gen-natsrpc. DO NOT EDIT.
// versions:
// - protoc-gen-natsrpc v0.5.0
// source: publish.proto

package publish

import (
	context "context"
	natsrpc "github.com/byebyebruce/natsrpc"
	testdata "github.com/byebyebruce/natsrpc/testdata"
	nats_go "github.com/nats-io/nats.go"
	reflect "reflect"
)

var _ context.Context
var _ = natsrpc.Version
var _ = nats_go.Version
var _ reflect.Value

const (
	_GreeterNATSRPCServiceName = "github.com/byebyebruce/natsrpc/example/pb/publish|request.Greeter"
)

var _Greeter_Desc = natsrpc.ServiceDesc{
	ServiceName: _GreeterNATSRPCServiceName,
	Methods: []natsrpc.MethodDesc{
		{
			MethodName:  "HelloToAll",
			Handler:     _Greeter_HelloToAll,
			RequestType: reflect.TypeOf(testdata.HelloRequest{}),
			IsPublish:   true,
		},
		{
			MethodName:  "Hello",
			Handler:     _Greeter_Hello,
			RequestType: reflect.TypeOf(testdata.HelloRequest{}),
			IsPublish:   false,
		},
	},
	Metadata: "publish.proto",
}

type GreeterNATSRPCServer interface {
	HelloToAll(ctx context.Context, req *testdata.HelloRequest) (*testdata.Empty, error)
	Hello(ctx context.Context, req *testdata.HelloRequest) (*testdata.Empty, error)
}

func _Greeter_HelloToAll(svc interface{}, ctx context.Context, req any) (any, error) {
	return svc.(GreeterNATSRPCServer).HelloToAll(ctx, req.(*testdata.HelloRequest))
}
func _Greeter_Hello(svc interface{}, ctx context.Context, req any) (any, error) {
	return svc.(GreeterNATSRPCServer).Hello(ctx, req.(*testdata.HelloRequest))
}

// RegisterGreeterNATSRPCServer register Greeter service
func RegisterGreeterNATSRPCServer(register natsrpc.ServiceRegistrar, s GreeterNATSRPCServer, opts ...natsrpc.ServiceOption) (natsrpc.IService, error) {
	return register.Register(_Greeter_Desc, s, opts...)
}

type GreeterNATSRPCClient interface {
	HelloToAll(notify *testdata.HelloRequest, opt ...natsrpc.CallOption) error
	Hello(ctx context.Context, req *testdata.HelloRequest, opt ...natsrpc.CallOption) (*testdata.Empty, error)
}

type _GreeterNATSRPCClient struct {
	c *natsrpc.Client
}

// NewGreeterNATSRPCClient
func NewGreeterNATSRPCClient(conn *nats_go.Conn, opts ...natsrpc.ClientOption) GreeterNATSRPCClient {
	c := natsrpc.NewClient(conn, _GreeterNATSRPCServiceName, opts...)
	ret := &_GreeterNATSRPCClient{
		c: c,
	}
	return ret
}
func (c *_GreeterNATSRPCClient) HelloToAll(notify *testdata.HelloRequest, opt ...natsrpc.CallOption) error {
	return c.c.Publish("HelloToAll", notify, opt...)
}
func (c *_GreeterNATSRPCClient) Hello(ctx context.Context, req *testdata.HelloRequest, opt ...natsrpc.CallOption) (*testdata.Empty, error) {
	rep := &testdata.Empty{}
	err := c.c.Request(ctx, "Hello", req, rep, opt...)
	return rep, err
}
