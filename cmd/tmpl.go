package main

const tFile = `// This code was autogenerated from natsrpc.gencode, do not edit.

package {{.OutPackage}}

import (
	"context"

	{{- range  .Imports}}
	{{.}}
	{{- end}}

	"github.com/byebyebruce/natsrpc"
)
{{- range .Service}}

// Register{{.Name}} {{.Comment}}
func Register{{.Name}}(rpc *natsrpc.NatsRPC, s {{$.Package}}.{{.Name}}, opts ...natsrpc.Option) (natsrpc.Service, error) {
	return rpc.Register(s, opts...)
}

// New{{.Name}}Client {{.Comment}}
func New{{.Name}}Client(rpc *natsrpc.NatsRPC, opts ...natsrpc.Option) (*{{.Name}}Client, error) {
	c := &{{.Name}}Client{
		rpc:rpc,
		opt:natsrpc.MakeOptions(opts...),
	}
	return c, nil
}

{{- $clientName := .Name}}

// {{.Name}}Client
type {{.Name}}Client struct {
	rpc 	*natsrpc.NatsRPC
	opt  	natsrpc.Options
}

// ID 根据ID获得client
func (c *{{.Name}}Client) ID(id interface{}) *{{.Name}}Client {
	ret := *c
	natsrpc.WithID(id)(&ret.opt)
	return &ret
}

{{ range .Method}}
	{{- $paramLength := len .Param -}}
	// {{.Name}} {{.Comment}}
	func (c *{{$clientName}}Client) {{.Name}}(
		{{- if eq $paramLength 2 -}}
			{{- $req :=index .Param 1 -}}
			{{ $req.Name }} *{{ $req.Type -}}
		) error {
			sub := natsrpc.CombineSubject(c.opt.Namespace(),"{{$.Package}}_{{$clientName}}_{{.Name}}", c.opt.ID())
			return c.rpc.Publish(sub, {{ $req.Name }}, c.opt)
		{{- else if eq $paramLength 3 -}}
			{{- $req :=index .Param 1 -}}
			{{- $rep :=index .Param 2 -}}
			ctx context.Context, {{ $req.Name }} *{{ $req.Type -}}
		) (*{{ $rep.Type }}, error) {
			sub := natsrpc.CombineSubject(c.opt.Namespace(),"{{$.Package}}_{{$clientName}}_{{.Name}}", c.opt.ID())
			rep := &{{ $rep.Type }}{}
			err := c.rpc.Request(ctx, sub, {{ $req.Name }}, rep, c.opt)
			return rep, err
		{{- end}}
	}
	{{ end }}
	
{{- end}}
`
